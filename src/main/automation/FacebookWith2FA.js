const { chromium } = require('playwright');
const TwoFactorAuth = require('../utils/TwoFactorAuth');
const StealthConfig = require('../utils/StealthConfig');
const HumanBehavior = require('../utils/HumanBehavior');
const CaptchaEvasion = require('../utils/CaptchaEvasion');

/**
 * Facebook Automation v·ªõi h·ªó tr·ª£ 2FA t·ª± ƒë·ªông
 */
class FacebookWith2FA {
  constructor(mainWindow) {
    this.mainWindow = mainWindow;
    this.browser = null;
    this.context = null;
    this.page = null;
  }

  log(message, type = 'info') {
    const logData = { message, type, timestamp: new Date().toISOString() };
    if (type === 'error' || type === 'success') {
      console.log(`[${type.toUpperCase()}] ${message}`);
    }
    if (this.mainWindow && !this.mainWindow.isDestroyed()) {
      this.mainWindow.webContents.send('log', logData);
    }
  }

  progress(current, total, message) {
    if (this.mainWindow && !this.mainWindow.isDestroyed()) {
      this.mainWindow.webContents.send('progress', { current, total, message });
    }
  }

  /**
   * ƒêƒÉng nh·∫≠p Facebook v·ªõi 2FA t·ª± ƒë·ªông
   * @param {Object} credentials - { email, password, twoFASecret }
   * @param {boolean} headless - Ch·∫°y ·∫©n hay hi·ªán browser
   * @param {string} userDataDir - Th∆∞ m·ª•c l∆∞u profile (persistent context)
   */
  async loginWith2FA(credentials, headless = false, userDataDir = null) {
    try {
      const { email, password, twoFASecret } = credentials;

      this.log('üöÄ B·∫Øt ƒë·∫ßu ƒëƒÉng nh·∫≠p t·ª± ƒë·ªông v·ªõi 2FA...', 'info');
      this.log(`üìß Email: ${email}`, 'info');

      // Get FULL stealth config
      const stealthConfig = StealthConfig.getStealthConfig({
        userDataDir: userDataDir,
      });

      // N·∫øu c√≥ userDataDir, d√πng persistent context (gi·ªëng Chrome profile)
      if (userDataDir) {
        this.log(`üíæ S·ª≠ d·ª•ng persistent context: ${userDataDir}`, 'info');
        
        this.context = await chromium.launchPersistentContext(userDataDir, {
          headless: headless,
          ...stealthConfig.contextOptions,
          args: stealthConfig.args,
        });
        
        // Persistent context t·ª± ƒë·ªông c√≥ page
        this.page = this.context.pages()[0] || await this.context.newPage();
        this.browser = null; // Kh√¥ng c√≥ browser object ri√™ng
        
      } else {
        // C√°ch c≈©: browser th∆∞·ªùng
        this.browser = await chromium.launch({
          headless: headless,
          args: stealthConfig.args,
        });

        this.context = await this.browser.newContext({
          ...stealthConfig.contextOptions,
        });

        this.page = await this.context.newPage();
      }

      // CRITICAL: Inject ALL stealth scripts
      this.log('üíâ Injecting ULTRA stealth scripts...', 'info');
      await StealthConfig.injectStealthScripts(this.page);
      
      // Inject captcha evasion
      await this.page.addInitScript(CaptchaEvasion.getCaptchaBypassScripts());
      
      // Set anti-captcha headers
      await this.page.setExtraHTTPHeaders(CaptchaEvasion.getAntiCaptchaHeaders());

      // B∆Ø·ªöC 1: Warmup session ƒë·ªÉ tr√°nh captcha
      this.log('üî• Warming up session...', 'info');
      await CaptchaEvasion.warmupSession(this.page);
      
      // Truy c·∫≠p Facebook
      this.log('üåê ƒêang truy c·∫≠p Facebook...', 'info');
      await this.page.goto('https://www.facebook.com/', { 
        waitUntil: 'domcontentloaded', 
        timeout: 15000 
      });
      
      // HUMAN BEHAVIOR: ƒê·ªçc trang tr∆∞·ªõc khi login
      await HumanBehavior.humanDelay(3000, 5000);
      await HumanBehavior.humanScroll(this.page, { distance: 200 });
      await HumanBehavior.humanDelay(2000, 3000);

      // Check captcha TR∆Ø·ªöC KHI login
      let captchaCheck = await CaptchaEvasion.detectCaptcha(this.page);
      if (captchaCheck.detected) {
        this.log('‚ö†Ô∏è Captcha ph√°t hi·ªán tr∆∞·ªõc login! ƒêang x·ª≠ l√Ω...', 'warning');
        const handled = await CaptchaEvasion.handleCaptcha(this.page, {
          autoClick: true,
          waitForManual: !headless,
          timeout: 120000,
        });
        if (!handled.success) {
          throw new Error('Cannot bypass captcha before login');
        }
      }

      // B∆Ø·ªöC 2: ƒêi·ªÅn email & password v·ªõi HUMAN BEHAVIOR
      this.log('üìù ƒêi·ªÅn th√¥ng tin ƒëƒÉng nh·∫≠p...', 'info');
      await this.page.waitForSelector('input[name="email"]', { timeout: 10000 });
      
      // Human-like typing
      await HumanBehavior.humanType(this.page, 'input[name="email"]', email, {
        minDelay: 80,
        maxDelay: 200,
        typoChance: 0.02,
      });
      
      await HumanBehavior.humanDelay(1000, 2000);
      
      await HumanBehavior.humanType(this.page, 'input[name="pass"]', password, {
        minDelay: 70,
        maxDelay: 180,
        typoChance: 0.03,
      });

      // Human pause tr∆∞·ªõc khi click
      await HumanBehavior.humanDelay(1500, 3000);

      // B∆Ø·ªöC 3: Click ƒëƒÉng nh·∫≠p v·ªõi HUMAN BEHAVIOR
      this.log('üîê Nh·∫•n ƒëƒÉng nh·∫≠p...', 'info');
      await HumanBehavior.humanClick(this.page, 'button[name="login"]', {
        moveToElement: true,
        reactionTime: true,
      });
      
      // ƒê·ª£i l√¢u h∆°n sau khi click
      await HumanBehavior.humanDelay(4000, 6000);

      // B∆Ø·ªöC 4: Ki·ªÉm tra v√† x·ª≠ l√Ω 2FA
      const needsTwoFA = await this.detect2FAPage();

      if (needsTwoFA) {
        this.log('üî¢ Ph√°t hi·ªán y√™u c·∫ßu 2FA...', 'info');
        
        // Check captcha TR∆Ø·ªöC KHI x·ª≠ l√Ω 2FA
        captchaCheck = await CaptchaEvasion.detectCaptcha(this.page);
        if (captchaCheck.detected) {
          this.log('‚ö†Ô∏è Captcha ph√°t hi·ªán ·ªü trang 2FA! ƒêang x·ª≠ l√Ω...', 'warning');
          const handled = await CaptchaEvasion.handleCaptcha(this.page, {
            autoClick: true,
            waitForManual: !headless,
            timeout: 120000,
          });
          if (!handled.success) {
            throw new Error('Cannot bypass captcha at 2FA page');
          }
          await HumanBehavior.humanDelay(3000, 5000);
        }
        
        // Human delay tr∆∞·ªõc khi click
        await HumanBehavior.humanDelay(2000, 4000);
        
        // Click "Th·ª≠ c√°ch kh√°c" n·∫øu c√≥
        const clickedTryCach = await this.clickTryCachKhac();
        if (clickedTryCach) {
          await HumanBehavior.humanDelay(2000, 3000);
          
          // Ch·ªçn "·ª®ng d·ª•ng x√°c th·ª±c"
          const clickedUngDung = await this.clickUngDungXacThuc();
          if (clickedUngDung) {
            await HumanBehavior.humanDelay(2000, 3000);
            
            // Click "Ti·∫øp t·ª•c"
            await this.clickTiepTuc();
            await HumanBehavior.humanDelay(2000, 3000);
          }
        }
        
        // Human delay tr∆∞·ªõc khi generate TOTP
        await HumanBehavior.humanDelay(1000, 2000);
        
        // T·∫°o m√£ TOTP
        const totpCode = TwoFactorAuth.generateTOTP(twoFASecret);
        const timeRemaining = TwoFactorAuth.getTimeRemaining();
        
        this.log(`üîë M√£ 2FA: ${totpCode} (c√≤n ${timeRemaining}s)`, 'success');

        // Human delay tr∆∞·ªõc khi ƒëi·ªÅn
        await HumanBehavior.humanDelay(1000, 2000);

        // ƒêi·ªÅn m√£ 2FA
        const filled = await this.fill2FACode(totpCode);
        
        if (!filled) {
          throw new Error('Kh√¥ng th·ªÉ ƒëi·ªÅn m√£ 2FA');
        }

        this.log('‚úÖ ƒê√£ ƒëi·ªÅn m√£ 2FA, ƒëang ch·ªù x√°c th·ª±c...', 'info');
        await HumanBehavior.humanDelay(5000, 8000);
      }

      // B∆Ø·ªöC 5: X·ª≠ l√Ω popup "L∆∞u th√¥ng tin ƒëƒÉng nh·∫≠p"
      this.log('üîç Ki·ªÉm tra popup "L∆∞u th√¥ng tin"...', 'info');
      await HumanBehavior.humanDelay(2000, 3000);
      await this.clickLuuThongTin();
      
      // B∆Ø·ªöC 6: X·ª≠ l√Ω "Tin c·∫≠y thi·∫øt b·ªã n√†y"
      this.log('üîç Ki·ªÉm tra "Tin c·∫≠y thi·∫øt b·ªã n√†y"...', 'info');
      await HumanBehavior.humanDelay(2000, 3000);
      await this.clickTinCayThietBi();
      
      // B∆Ø·ªöC 7: ƒê·ª£i page load ho√†n to√†n
      await HumanBehavior.humanDelay(3000, 5000);
      
      // B∆Ø·ªöC 8: Ki·ªÉm tra ƒëƒÉng nh·∫≠p th√†nh c√¥ng
      const loginSuccess = await this.checkLoginSuccess();

      if (loginSuccess) {
        this.log('‚úÖ ƒêƒÉng nh·∫≠p 2FA th√†nh c√¥ng!', 'success');
        
        // L·∫•y t√™n user
        const userName = await this.getUserName();
        
        this.log(`üéâ Ho√†n t·∫•t ƒëƒÉng nh·∫≠p: ${userName}`, 'success');

        // L·∫•y session
        const sessionData = await this.getSessionData();

        return {
          success: true,
          userName: userName,
          sessionData: sessionData,
          email: email
        };
      } else {
        throw new Error('ƒêƒÉng nh·∫≠p th·∫•t b·∫°i sau khi nh·∫≠p 2FA');
      }

    } catch (error) {
      this.log(`‚ùå L·ªói ƒëƒÉng nh·∫≠p: ${error.message}`, 'error');
      
      // Close browser n·∫øu l·ªói
      if (this.browser) {
        await this.browser.close().catch(() => {});
      }

      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * Ph√°t hi·ªán trang y√™u c·∫ßu 2FA
   */
  async detect2FAPage() {
    try {
      const url = this.page.url();
      
      // Check URL
      if (url.includes('/checkpoint/') || 
          url.includes('/two_factor/') ||
          url.includes('approvals_code')) {
        return true;
      }

      // Check input 2FA
      const has2FAInput = await this.page.evaluate(() => {
        // T√¨m input code
        const inputs = document.querySelectorAll('input[type="text"], input[type="tel"]');
        
        for (const input of inputs) {
          const label = input.getAttribute('aria-label') || input.getAttribute('placeholder') || '';
          const name = input.getAttribute('name') || '';
          
          // Facebook d√πng nhi·ªÅu t√™n kh√°c nhau cho input 2FA
          if (label.toLowerCase().includes('code') ||
              label.toLowerCase().includes('m√£') ||
              name.includes('approvals_code') ||
              name.includes('code')) {
            return true;
          }
        }
        
        return false;
      });

      return has2FAInput;
    } catch (error) {
      return false;
    }
  }

  /**
   * ƒêi·ªÅn m√£ 2FA v√†o form - IMPROVED VERSION
   */
  async fill2FACode(code) {
    try {
      this.log(`üîç ƒêang t√¨m √¥ nh·∫≠p m√£ 2FA...`, 'info');
      
      // ƒê·ª£i page load sau khi click "Ti·∫øp t·ª•c"
      await this.page.waitForTimeout(2000);
      
      // Chi·∫øn l∆∞·ª£c 1: T√¨m input b·∫±ng name="approvals_code"
      const approvalInputCount = await this.page.locator('input[name="approvals_code"]').count();
      if (approvalInputCount > 0) {
        this.log(`‚úì T√¨m th·∫•y input[name="approvals_code"]`, 'info');
        const approvalInput = await this.page.locator('input[name="approvals_code"]').first();
        
        // Human-like typing
        await HumanBehavior.humanType(this.page, 'input[name="approvals_code"]', code, {
          minDelay: 100,
          maxDelay: 200,
        });
        
        await HumanBehavior.humanDelay(1000, 2000);
        
        // Click submit
        await this.clickSubmitButton();
        return true;
      }

      // Chi·∫øn l∆∞·ª£c 2: T√¨m b·∫•t k·ª≥ input text n√†o visible
      this.log(`üîç T√¨m input text visible...`, 'info');
      const allInputs = await this.page.locator('input[type="text"], input[type="tel"], input[type="number"]').all();
      
      for (const input of allInputs) {
        const isVisible = await input.isVisible();
        if (isVisible) {
          this.log(`‚úì T√¨m th·∫•y input visible, ƒëang ƒëi·ªÅn m√£...`, 'info');
          
          // Click v√†o input
          await input.click();
          await HumanBehavior.humanDelay(500, 1000);
          
          // Type code human-like
          await input.pressSequentially(code, { delay: 150 });
          
          await HumanBehavior.humanDelay(1000, 2000);
          
          // Click submit
          await this.clickSubmitButton();
          return true;
        }
      }

      // Chi·∫øn l∆∞·ª£c 3: T√¨m b·∫±ng evaluate (last resort)
      this.log(`üîç T√¨m input b·∫±ng evaluate...`, 'info');
      const filled = await this.page.evaluate((code) => {
        const inputs = document.querySelectorAll('input[type="text"], input[type="tel"], input[type="number"], input:not([type])');
        
        for (const input of inputs) {
          // Check if visible
          const style = window.getComputedStyle(input);
          if (style.display === 'none' || style.visibility === 'hidden') continue;
          
          const label = (input.getAttribute('aria-label') || '').toLowerCase();
          const placeholder = (input.getAttribute('placeholder') || '').toLowerCase();
          const name = (input.getAttribute('name') || '').toLowerCase();
          const id = (input.getAttribute('id') || '').toLowerCase();
          
          // Check if this is 2FA input
          if (label.includes('code') || 
              label.includes('m√£') ||
              placeholder.includes('code') ||
              placeholder.includes('m√£') ||
              placeholder.includes('6') ||
              name.includes('code') ||
              id.includes('code')) {
            
            console.log('‚úì Found 2FA input:', input);
            
            // Focus and fill
            input.focus();
            input.value = code;
            input.dispatchEvent(new Event('input', { bubbles: true }));
            input.dispatchEvent(new Event('change', { bubbles: true }));
            input.dispatchEvent(new KeyboardEvent('keyup', { bubbles: true }));
            
            return true;
          }
        }
        
        // Fallback: Fill first visible input
        for (const input of inputs) {
          const style = window.getComputedStyle(input);
          if (style.display !== 'none' && style.visibility !== 'hidden') {
            console.log('‚ö†Ô∏è Fallback: Filling first visible input');
            input.focus();
            input.value = code;
            input.dispatchEvent(new Event('input', { bubbles: true }));
            input.dispatchEvent(new Event('change', { bubbles: true }));
            return true;
          }
        }
        
        return false;
      }, code);

      if (filled) {
        this.log(`‚úì ƒê√£ ƒëi·ªÅn m√£ b·∫±ng evaluate`, 'info');
        await this.page.waitForTimeout(1000);
        await this.clickSubmitButton();
        return true;
      }

      this.log(`‚ùå Kh√¥ng t√¨m th·∫•y √¥ nh·∫≠p m√£ 2FA`, 'error');
      return false;
    } catch (error) {
      this.log(`‚ùå L·ªói ƒëi·ªÅn 2FA: ${error.message}`, 'error');
      return false;
    }
  }

  /**
   * Click n√∫t submit sau khi ƒëi·ªÅn 2FA
   */
  async clickSubmitButton() {
    try {
      // T√¨m n√∫t "Ti·∫øp t·ª•c" / "Continue" / "Submit"
      const clicked = await this.page.evaluate(() => {
        const buttons = document.querySelectorAll('button, div[role="button"]');
        
        for (const btn of buttons) {
          const text = btn.textContent.trim().toLowerCase();
          
          if (text.includes('ti·∫øp t·ª•c') ||
              text.includes('continue') ||
              text.includes('submit') ||
              text.includes('x√°c nh·∫≠n') ||
              text.includes('confirm')) {
            
            btn.click();
            return true;
          }
        }
        
        return false;
      });

      if (!clicked) {
        // Fallback: Nh·∫•n Enter
        await this.page.keyboard.press('Enter');
      }

      return true;
    } catch (error) {
      return false;
    }
  }

  /**
   * Ki·ªÉm tra ƒëƒÉng nh·∫≠p th√†nh c√¥ng
   */
  async checkLoginSuccess() {
    try {
      // ƒê·ª£i t·ªëi ƒëa 15 gi√¢y
      for (let i = 0; i < 30; i++) {
        await this.page.waitForTimeout(500);
        
        const url = this.page.url();
        
        // Check URL kh√¥ng ph·∫£i login/checkpoint
        if (!url.includes('/login') && 
            !url.includes('/checkpoint/') &&
            !url.includes('/two_factor/')) {
          
          // Check c√≥ elements c·ªßa Facebook
          const hasElements = await this.page.evaluate(() => {
            return document.querySelector('[role="feed"]') !== null ||
                   document.querySelector('[role="main"]') !== null ||
                   document.querySelector('a[href*="/profile.php"]') !== null;
          });
          
          if (hasElements) {
            return true;
          }
        }
      }
      
      return false;
    } catch (error) {
      return false;
    }
  }

  /**
   * L·∫•y t√™n ng∆∞·ªùi d√πng - IMPROVED
   */
  async getUserName() {
    try {
      this.log('üìõ ƒêang l·∫•y t√™n ng∆∞·ªùi d√πng...', 'info');
      
      // Method 1: ƒêi ƒë·∫øn profile page
      try {
        await this.page.goto('https://www.facebook.com/me', { 
          waitUntil: 'domcontentloaded',
          timeout: 15000 
        });
        await this.page.waitForTimeout(3000);
        
        const profileName = await this.page.evaluate(() => {
          // T√¨m h1 ƒë·∫ßu ti√™n (t√™n profile)
          const h1Elements = document.querySelectorAll('h1');
          for (const h1 of h1Elements) {
            const text = h1.textContent.trim();
            
            if (!text || text.length < 2) continue;
            
            const forbidden = [
              'facebook', 'profile', 'trang c√° nh√¢n', 'home', 'ƒëo·∫°n chat',
              'chats', 'messages', 'messenger', 'b·∫°n b√®', 'friends', 'video',
              'watch', 'marketplace', 'groups', 'pages', 'notifications'
            ];
            
            const textLower = text.toLowerCase();
            const isForbidden = forbidden.some(f => textLower.includes(f));
            
            if (!isForbidden && text.length >= 2 && text.length <= 100) {
              console.log(`‚úì T√¨m th·∫•y t√™n t·ª´ h1: ${text}`);
              return text;
            }
          }
          
          // T√¨m t·ª´ document.title
          if (document.title) {
            const titleParts = document.title.split('|');
            const possibleName = titleParts[0].trim();
            
            if (possibleName && 
                !possibleName.toLowerCase().startsWith('facebook') &&
                possibleName.length >= 2 &&
                possibleName.length <= 100) {
              console.log(`‚úì T√¨m th·∫•y t√™n t·ª´ title: ${possibleName}`);
              return possibleName;
            }
          }
          
          // T√¨m t·ª´ meta og:title
          const metaTitle = document.querySelector('meta[property="og:title"]');
          if (metaTitle) {
            const content = metaTitle.getAttribute('content');
            if (content && 
                !content.toLowerCase().startsWith('facebook') &&
                content.length >= 2 &&
                content.length <= 100) {
              console.log(`‚úì T√¨m th·∫•y t√™n t·ª´ meta: ${content}`);
              return content;
            }
          }
          
          return null;
        });
        
        if (profileName) {
          this.log(`‚úÖ L·∫•y ƒë∆∞·ª£c t√™n: ${profileName}`, 'success');
          
          // Quay v·ªÅ trang ch·ªß
          await this.page.goto('https://www.facebook.com/', { 
            waitUntil: 'domcontentloaded',
            timeout: 10000 
          });
          
          return profileName;
        }
      } catch (error) {
        this.log(`‚ö†Ô∏è L·ªói l·∫•y t√™n t·ª´ profile: ${error.message}`, 'warning');
      }
      
      // Method 2: L·∫•y t·ª´ current page
      const userName = await this.page.evaluate(() => {
        // T√¨m t√™n trong profile link
        const profileLink = document.querySelector('a[href*="/profile.php"]');
        if (profileLink) {
          const ariaLabel = profileLink.getAttribute('aria-label');
          if (ariaLabel && ariaLabel.length > 0 && ariaLabel.length < 100) {
            return ariaLabel;
          }
        }
        
        // T√¨m trong menu
        const menuItems = document.querySelectorAll('[role="menuitem"]');
        for (const item of menuItems) {
          const text = item.textContent.trim();
          if (text && text.length > 2 && text.length < 50) {
            const firstLine = text.split('\n')[0].trim();
            if (firstLine && firstLine.length > 2) {
              return firstLine;
            }
          }
        }
        
        // T√¨m span c√≥ t√™n
        const spans = document.querySelectorAll('span');
        for (const span of spans) {
          const text = span.textContent.trim();
          const parent = span.parentElement;
          
          if (text && text.length >= 2 && text.length <= 50 &&
              parent && parent.tagName === 'A' &&
              parent.href && parent.href.includes('/profile.php')) {
            return text;
          }
        }
        
        return null;
      });
      
      if (userName) {
        this.log(`‚úÖ L·∫•y ƒë∆∞·ª£c t√™n: ${userName}`, 'success');
        return userName;
      }
      
      this.log('‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c t√™n ng∆∞·ªùi d√πng - d√πng t√™n m·∫∑c ƒë·ªãnh', 'warning');
      return 'Ng∆∞·ªùi d√πng';
    } catch (error) {
      this.log(`‚ùå L·ªói l·∫•y t√™n ng∆∞·ªùi d√πng: ${error.message}`, 'error');
      return 'Ng∆∞·ªùi d√πng';
    }
  }

  /**
   * L·∫•y session data ƒë·ªÉ l∆∞u
   */
  async getSessionData() {
    try {
      const sessionState = await this.context.storageState();
      return sessionState;
    } catch (error) {
      return null;
    }
  }

  /**
   * L·∫•y session state hi·ªán t·∫°i
   */
  async getSessionState() {
    try {
      if (this.context) {
        return await this.context.storageState();
      }
      return null;
    } catch (error) {
      return null;
    }
  }

  /**
   * Click "Th·ª≠ c√°ch kh√°c"
   */
  async clickTryCachKhac() {
    try {
      const clicked = await this.page.evaluate(() => {
        const buttons = document.querySelectorAll('div[role="button"], button, a');
        
        for (const btn of buttons) {
          const text = btn.textContent.trim();
          
          if (text.includes('Th·ª≠ c√°ch kh√°c') || 
              text.includes('Try another way') ||
              text.includes('Try other ways')) {
            btn.click();
            console.log('‚úì Clicked Th·ª≠ c√°ch kh√°c');
            return true;
          }
        }
        
        return false;
      });
      
      return clicked;
    } catch (error) {
      return false;
    }
  }

  /**
   * Click "·ª®ng d·ª•ng x√°c th·ª±c" - IMPROVED
   */
  async clickUngDungXacThuc() {
    try {
      this.log('üîç T√¨m v√† click "·ª®ng d·ª•ng x√°c th·ª±c"...', 'info');
      
      // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ page load
      await this.page.waitForTimeout(1500);
      
      // Method 1: T√¨m b·∫±ng Playwright locator
      const radioLabels = await this.page.locator('div[role="radio"], label, div[tabindex="0"]').all();
      
      for (const label of radioLabels) {
        const text = await label.textContent();
        if (text && (text.includes('·ª®ng d·ª•ng x√°c th·ª±c') || 
                     text.includes('Authentication app') ||
                     text.includes('x√°c th·ª±c'))) {
          
          this.log('‚úì T√¨m th·∫•y element "·ª®ng d·ª•ng x√°c th·ª±c"', 'info');
          
          // Human-like click
          await label.scrollIntoViewIfNeeded();
          await HumanBehavior.humanDelay(500, 1000);
          await label.click();
          
          this.log('‚úÖ ƒê√£ click "·ª®ng d·ª•ng x√°c th·ª±c"', 'success');
          return true;
        }
      }
      
      // Method 2: Evaluate and click
      const clicked = await this.page.evaluate(() => {
        // T√¨m t·∫•t c·∫£ elements
        const allElements = document.querySelectorAll('div, span, label, input');
        
        for (const el of allElements) {
          const text = el.textContent || '';
          const ariaLabel = el.getAttribute('aria-label') || '';
          
          if (text.includes('·ª®ng d·ª•ng x√°c th·ª±c') || 
              text.includes('Authentication app') ||
              ariaLabel.includes('Authentication app') ||
              text.includes('x√°c th·ª±c')) {
            
            // T√¨m clickable parent
            let clickable = el;
            
            // Check n·∫øu l√† radio input
            if (el.tagName === 'INPUT' && el.type === 'radio') {
              clickable = el;
            } else {
              // T√¨m radio trong children
              const radio = el.querySelector('input[type="radio"]');
              if (radio) {
                clickable = radio;
              } else {
                // T√¨m clickable parent
                clickable = el.closest('div[role="radio"]') ||
                           el.closest('label') ||
                           el.closest('div[tabindex="0"]') ||
                           el;
              }
            }
            
            // Click
            clickable.scrollIntoView({ block: 'center' });
            clickable.click();
            
            console.log('‚úì Clicked ·ª®ng d·ª•ng x√°c th·ª±c');
            return true;
          }
        }
        
        return false;
      });
      
      if (clicked) {
        this.log('‚úÖ ƒê√£ click "·ª®ng d·ª•ng x√°c th·ª±c" (evaluate)', 'success');
        return true;
      }
      
      this.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y "·ª®ng d·ª•ng x√°c th·ª±c"', 'warning');
      return false;
    } catch (error) {
      this.log(`‚ùå L·ªói click "·ª®ng d·ª•ng x√°c th·ª±c": ${error.message}`, 'error');
      return false;
    }
  }

  /**
   * Click "Ti·∫øp t·ª•c" - IMPROVED
   */
  async clickTiepTuc() {
    try {
      this.log('üîç T√¨m v√† click "Ti·∫øp t·ª•c"...', 'info');
      
      // ƒê·ª£i button xu·∫•t hi·ªán
      await this.page.waitForTimeout(1500);
      
      // Method 1: T√¨m b·∫±ng Playwright locator
      const buttons = await this.page.locator('button, div[role="button"], [role="button"]').all();
      
      for (const button of buttons) {
        try {
          const text = await button.textContent();
          const isVisible = await button.isVisible();
          
          if (isVisible && text && (text.trim() === 'Ti·∫øp t·ª•c' || 
                                     text.trim() === 'Continue' ||
                                     text.includes('Ti·∫øp t·ª•c') ||
                                     text.includes('Continue'))) {
            
            this.log('‚úì T√¨m th·∫•y n√∫t "Ti·∫øp t·ª•c"', 'info');
            
            // Human-like click
            await button.scrollIntoViewIfNeeded();
            await HumanBehavior.humanDelay(500, 1000);
            await button.click();
            
            this.log('‚úÖ ƒê√£ click "Ti·∫øp t·ª•c"', 'success');
            return true;
          }
        } catch (e) {
          // Skip this button
          continue;
        }
      }
      
      // Method 2: Evaluate and click
      const clicked = await this.page.evaluate(() => {
        const buttons = document.querySelectorAll('button, div[role="button"], [role="button"], a');
        
        for (const btn of buttons) {
          const text = btn.textContent.trim();
          const ariaLabel = btn.getAttribute('aria-label') || '';
          
          // Check visibility
          const style = window.getComputedStyle(btn);
          if (style.display === 'none' || style.visibility === 'hidden') continue;
          
          if (text === 'Ti·∫øp t·ª•c' || 
              text === 'Continue' ||
              text === 'Ti·∫øp' ||
              text.includes('Ti·∫øp t·ª•c') ||
              ariaLabel.includes('Continue') ||
              ariaLabel.includes('Ti·∫øp t·ª•c')) {
            
            btn.scrollIntoView({ block: 'center' });
            btn.click();
            
            console.log('‚úì Clicked Ti·∫øp t·ª•c');
            return true;
          }
        }
        
        return false;
      });
      
      if (clicked) {
        this.log('‚úÖ ƒê√£ click "Ti·∫øp t·ª•c" (evaluate)', 'success');
        return true;
      }
      
      this.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y n√∫t "Ti·∫øp t·ª•c"', 'warning');
      return false;
    } catch (error) {
      this.log(`‚ùå L·ªói click "Ti·∫øp t·ª•c": ${error.message}`, 'error');
      return false;
    }
  }

  /**
   * Click "L∆∞u" (l∆∞u th√¥ng tin ƒëƒÉng nh·∫≠p)
   */
  async clickLuuThongTin() {
    try {
      this.log('üîç T√¨m n√∫t "L∆∞u" th√¥ng tin ƒëƒÉng nh·∫≠p...', 'info');
      
      // ƒê·ª£i popup xu·∫•t hi·ªán
      await this.page.waitForTimeout(2000);
      
      // Method 1: T√¨m button "L∆∞u"
      const buttons = await this.page.locator('button, div[role="button"]').all();
      
      for (const button of buttons) {
        try {
          const text = await button.textContent();
          const isVisible = await button.isVisible();
          
          if (isVisible && text && (text.trim() === 'L∆∞u' || 
                                     text.trim() === 'Save' ||
                                     text.includes('L∆∞u'))) {
            
            this.log('‚úì T√¨m th·∫•y n√∫t "L∆∞u"', 'info');
            await button.scrollIntoViewIfNeeded();
            await HumanBehavior.humanDelay(500, 1000);
            await button.click();
            
            this.log('‚úÖ ƒê√£ click "L∆∞u"', 'success');
            return true;
          }
        } catch (e) {
          continue;
        }
      }
      
      // Method 2: Evaluate
      const clicked = await this.page.evaluate(() => {
        const buttons = document.querySelectorAll('button, div[role="button"]');
        
        for (const btn of buttons) {
          const text = btn.textContent.trim();
          const style = window.getComputedStyle(btn);
          
          if (style.display !== 'none' && style.visibility !== 'hidden' &&
              (text === 'L∆∞u' || text === 'Save')) {
            
            btn.scrollIntoView({ block: 'center' });
            btn.click();
            console.log('‚úì Clicked L∆∞u');
            return true;
          }
        }
        return false;
      });
      
      if (clicked) {
        this.log('‚úÖ ƒê√£ click "L∆∞u" (evaluate)', 'success');
      } else {
        this.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y n√∫t "L∆∞u" (c√≥ th·ªÉ ƒë√£ b·ªè qua)', 'warning');
      }
      
      return true;
    } catch (error) {
      this.log(`‚ö†Ô∏è L·ªói click "L∆∞u": ${error.message}`, 'warning');
      return true; // Return true anyway ƒë·ªÉ ti·∫øp t·ª•c
    }
  }

  /**
   * Click "Tin c·∫≠y thi·∫øt b·ªã n√†y"
   */
  async clickTinCayThietBi() {
    try {
      this.log('üîç T√¨m n√∫t "Tin c·∫≠y thi·∫øt b·ªã n√†y"...', 'info');
      
      // ƒê·ª£i page load
      await this.page.waitForTimeout(2000);
      
      // Method 1: T√¨m button
      const buttons = await this.page.locator('button, div[role="button"]').all();
      
      for (const button of buttons) {
        try {
          const text = await button.textContent();
          const isVisible = await button.isVisible();
          
          if (isVisible && text && (text.includes('Tin c·∫≠y thi·∫øt b·ªã') || 
                                     text.includes('Trust this device') ||
                                     text.includes('Tin c·∫≠y') ||
                                     text.includes('Trust'))) {
            
            this.log('‚úì T√¨m th·∫•y n√∫t "Tin c·∫≠y thi·∫øt b·ªã n√†y"', 'info');
            await button.scrollIntoViewIfNeeded();
            await HumanBehavior.humanDelay(500, 1000);
            await button.click();
            
            this.log('‚úÖ ƒê√£ click "Tin c·∫≠y thi·∫øt b·ªã n√†y"', 'success');
            return true;
          }
        } catch (e) {
          continue;
        }
      }
      
      // Method 2: Evaluate
      const clicked = await this.page.evaluate(() => {
        const buttons = document.querySelectorAll('button, div[role="button"]');
        
        for (const btn of buttons) {
          const text = btn.textContent.trim();
          const style = window.getComputedStyle(btn);
          
          if (style.display !== 'none' && style.visibility !== 'hidden' &&
              (text.includes('Tin c·∫≠y thi·∫øt b·ªã') || 
               text.includes('Trust this device') ||
               text.includes('Tin c·∫≠y') ||
               text === 'Trust')) {
            
            btn.scrollIntoView({ block: 'center' });
            btn.click();
            console.log('‚úì Clicked Tin c·∫≠y thi·∫øt b·ªã');
            return true;
          }
        }
        return false;
      });
      
      if (clicked) {
        this.log('‚úÖ ƒê√£ click "Tin c·∫≠y thi·∫øt b·ªã" (evaluate)', 'success');
      } else {
        this.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y n√∫t "Tin c·∫≠y thi·∫øt b·ªã" (c√≥ th·ªÉ ƒë√£ b·ªè qua)', 'warning');
      }
      
      return true;
    } catch (error) {
      this.log(`‚ö†Ô∏è L·ªói click "Tin c·∫≠y thi·∫øt b·ªã": ${error.message}`, 'warning');
      return true; // Return true anyway ƒë·ªÉ ti·∫øp t·ª•c
    }
  }

  /**
   * ƒê√≥ng browser
   */
  async close() {
    try {
      // Persistent context kh√¥ng c·∫ßn close browser
      if (this.context && !this.browser) {
        await this.context.close();
      } else if (this.browser) {
        await this.browser.close();
      }
    } catch (error) {
      console.error('L·ªói ƒë√≥ng browser:', error);
    }
  }
}

module.exports = FacebookWith2FA;

