const FacebookWith2FA = require('../automation/FacebookWith2FA');
const FacebookAdvanced = require('../automation/FacebookAdvanced');
const SessionManager = require('./SessionManager');
const AccountLifecycle = require('./AccountLifecycle');
const StealthConfig = require('./StealthConfig');

/**
 * BATCH LOGIN MANAGER - ENTERPRISE LEVEL
 * 
 * Parse v√† login t·ª± ƒë·ªông nhi·ªÅu accounts t·ª´ chu·ªói
 * Format: accountId|password|2faSecret|email|password2|email2
 * Example: 61568434832204|Moimedia@@|YDTCEYESIW4LBVLKK3A5HW3ZJKQ3SAF2|chelcabula@outlook.com|Moimedia@@@|chelcabulamoi@smvmail.com
 */
class BatchLoginManager {
  constructor(mainWindow, options = {}) {
    this.mainWindow = mainWindow;
    this.sessionManager = new SessionManager();
    this.lifecycle = new AccountLifecycle();
    this.proxyManager = options.proxyManager || null;
    
    // Results tracking
    this.results = [];
    this.successCount = 0;
    this.failedCount = 0;
  }

  log(message, type = 'info') {
    const logData = {
      message,
      type,
      timestamp: new Date().toISOString()
    };
    
    console.log(`[${type.toUpperCase()}] ${message}`);
    
    if (this.mainWindow && !this.mainWindow.isDestroyed()) {
      this.mainWindow.webContents.send('batch-log', logData);
    }
  }

  progress(current, total, message) {
    if (this.mainWindow && !this.mainWindow.isDestroyed()) {
      this.mainWindow.webContents.send('batch-progress', { 
        current, 
        total, 
        message,
        successCount: this.successCount,
        failedCount: this.failedCount,
      });
    }
  }

  /**
   * PARSE ACCOUNT STRING
   * Format: accountId|password|2faSecret|email|password2|email2
   * 
   * accountId: Facebook user ID (s·ªë)
   * password: M·∫≠t kh·∫©u ƒëƒÉng nh·∫≠p (c√≥ th·ªÉ gi·ªëng ho·∫∑c kh√°c password2)
   * 2faSecret: TOTP secret key (Base32)
   * email: Email ƒëƒÉng nh·∫≠p ch√≠nh
   * password2: M·∫≠t kh·∫©u backup (c√≥ th·ªÉ kh√°c password)
   * email2: Email backup
   */
  parseAccountString(accountString) {
    try {
      // Remove whitespace
      const cleaned = accountString.trim();
      
      // Split by |
      const parts = cleaned.split('|');
      
      if (parts.length < 4) {
        throw new Error('Invalid format: c·∫ßn √≠t nh·∫•t 4 ph·∫ßn (accountId|password|2faSecret|email)');
      }
      
      const account = {
        accountId: parts[0].trim(),
        password: parts[1].trim(),
        twoFASecret: parts[2].trim(),
        email: parts[3].trim(),
        password2: parts[4] ? parts[4].trim() : parts[1].trim(), // Default = password
        email2: parts[5] ? parts[5].trim() : parts[3].trim(),    // Default = email
      };
      
      // Validate
      if (!account.accountId) {
        throw new Error('Account ID is required');
      }
      
      if (!account.email) {
        throw new Error('Email is required');
      }
      
      if (!account.password) {
        throw new Error('Password is required');
      }
      
      // Validate email format
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(account.email)) {
        throw new Error(`Invalid email format: ${account.email}`);
      }
      
      // Validate 2FA secret (Base32)
      if (account.twoFASecret) {
        const base32Regex = /^[A-Z2-7]+=*$/;
        if (!base32Regex.test(account.twoFASecret)) {
          this.log(`‚ö†Ô∏è Warning: 2FA secret c√≥ th·ªÉ kh√¥ng h·ª£p l·ªá (kh√¥ng ph·∫£i Base32): ${account.twoFASecret}`, 'warning');
        }
      }
      
      return {
        success: true,
        account: account,
      };
    } catch (error) {
      return {
        success: false,
        error: error.message,
      };
    }
  }

  /**
   * PARSE BATCH STRING (nhi·ªÅu accounts)
   * M·ªói d√≤ng = 1 account
   */
  parseBatchString(batchString) {
    try {
      // Split by newline
      const lines = batchString
        .split('\n')
        .map(line => line.trim())
        .filter(line => line.length > 0);
      
      if (lines.length === 0) {
        throw new Error('No accounts found');
      }
      
      const accounts = [];
      const errors = [];
      
      lines.forEach((line, index) => {
        const result = this.parseAccountString(line);
        
        if (result.success) {
          accounts.push(result.account);
        } else {
          errors.push({
            line: index + 1,
            text: line,
            error: result.error,
          });
        }
      });
      
      return {
        success: true,
        accounts: accounts,
        errors: errors,
        total: lines.length,
        valid: accounts.length,
        invalid: errors.length,
      };
    } catch (error) {
      return {
        success: false,
        error: error.message,
      };
    }
  }

  /**
   * CHECK n·∫øu account ƒë√£ c√≥ session
   */
  async hasExistingSession(accountId) {
    try {
      const result = await this.sessionManager.restoreSession(accountId);
      return result.success && result.sessionData;
    } catch (error) {
      return false;
    }
  }

  /**
   * LOGIN SINGLE ACCOUNT v·ªõi 2FA automation
   */
  async loginSingleAccount(account, options = {}) {
    const {
      headless = false,
      useProxy = false,
      skipIfHasSession = true,
    } = options;

    try {
      this.log(`üöÄ ƒêang ƒëƒÉng nh·∫≠p: ${account.email} (ID: ${account.accountId})`, 'info');
      
      // Check if already has session
      if (skipIfHasSession) {
        const hasSession = await this.hasExistingSession(account.accountId);
        
        if (hasSession) {
          this.log(`‚úÖ Account ${account.accountId} ƒë√£ c√≥ session, b·ªè qua ƒëƒÉng nh·∫≠p`, 'success');
          
          // Create lifecycle profile if not exists
          if (!this.lifecycle.getAccountProfile(account.accountId)) {
            this.lifecycle.createAccountProfile(account.accountId);
          }
          
          return {
            success: true,
            accountId: account.accountId,
            email: account.email,
            skipped: true,
            message: 'Already has session',
          };
        }
      }
      
      // Create lifecycle profile
      if (!this.lifecycle.getAccountProfile(account.accountId)) {
        this.lifecycle.createAccountProfile(account.accountId, {
          accountType: 'regular',
          initialReputation: 0,
        });
        this.log(`üìä Created lifecycle profile for ${account.accountId}`, 'info');
      }
      
      // Setup User Data Directory
      const userDataDir = StealthConfig.createUserDataDir(account.accountId);
      this.log(`üíæ User Data Directory: ${userDataDir}`, 'info');
      
      // Get proxy if enabled
      let proxyId = null;
      if (useProxy && this.proxyManager) {
        const proxy = this.proxyManager.getBestProxy(account.accountId, {
          type: 'residential',
        });
        
        if (proxy) {
          proxyId = proxy.id;
          this.proxyManager.assignProxyToAccount(account.accountId, proxyId);
          this.log(`üåê Assigned proxy: ${proxy.server}`, 'info');
        }
      }
      
      // N·∫øu c√≥ 2FA secret, d√πng FacebookWith2FA
      if (account.twoFASecret && account.twoFASecret.length > 10) {
        this.log('üîê S·ª≠ d·ª•ng 2FA automation...', 'info');
        
        const fb2FA = new FacebookWith2FA(this.mainWindow);
        
        const result = await fb2FA.loginWith2FA({
          email: account.email,
          password: account.password,
          twoFASecret: account.twoFASecret,
        }, headless, userDataDir);
        
        if (result.success) {
          this.log(`‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng v·ªõi 2FA: ${result.userName}`, 'success');
          
          // Capture full session
          this.log('üíæ ƒêang l∆∞u session...', 'info');
          await this.sessionManager.captureFullSession(fb2FA.page, account.accountId);
          
          // Update lifecycle
          this.lifecycle.updateActivity(account.accountId, 'login');
          
          // Close browser
          await fb2FA.close();
          
          return {
            success: true,
            accountId: account.accountId,
            email: account.email,
            userName: result.userName,
            has2FA: true,
          };
        } else {
          throw new Error(result.error || 'Login failed with 2FA');
        }
      } 
      // Kh√¥ng c√≥ 2FA, d√πng FacebookAdvanced
      else {
        this.log('üîì ƒêƒÉng nh·∫≠p kh√¥ng c√≥ 2FA...', 'info');
        
        const fb = new FacebookAdvanced(this.mainWindow, {
          accountId: account.accountId,
          userDataDir: userDataDir,
          proxyManager: this.proxyManager,
          useProxy: useProxy,
          proxyId: proxyId,
        });
        
        const result = await fb.login(account.email, account.password, headless);
        
        if (result.success) {
          this.log(`‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng: ${result.userName}`, 'success');
          
          // Update lifecycle
          this.lifecycle.updateActivity(account.accountId, 'login');
          
          // Close browser
          await fb.close();
          
          return {
            success: true,
            accountId: account.accountId,
            email: account.email,
            userName: result.userName,
            has2FA: false,
          };
        } else {
          throw new Error(result.error || 'Login failed');
        }
      }
    } catch (error) {
      this.log(`‚ùå L·ªói ƒëƒÉng nh·∫≠p ${account.email}: ${error.message}`, 'error');
      
      // Record failure
      if (this.lifecycle.getAccountProfile(account.accountId)) {
        this.lifecycle.recordLoginFailure(account.accountId, error.message);
      }
      
      return {
        success: false,
        accountId: account.accountId,
        email: account.email,
        error: error.message,
      };
    }
  }

  /**
   * LOGIN BATCH ACCOUNTS - PARALLEL VERSION
   */
  async loginBatch(batchString, options = {}) {
    const {
      headless = true,
      useProxy = false,
      skipIfHasSession = true,
      delayBetweenAccounts = [5000, 10000], // 5-10 GI√ÇY gi·ªØa m·ªói l·∫ßn kh·ªüi ƒë·ªông browser
      stopOnError = false,
      maxConcurrent = 3, // S·ªë browser ch·∫°y ƒë·ªìng th·ªùi (m·∫∑c ƒë·ªãnh 3)
      parallelMode = true, // B·∫≠t/t·∫Øt ch·∫ø ƒë·ªô song song
    } = options;

    try {
      this.log('üìã ƒêang ph√¢n t√≠ch danh s√°ch accounts...', 'info');
      
      // Parse batch string
      const parseResult = this.parseBatchString(batchString);
      
      if (!parseResult.success) {
        throw new Error(parseResult.error);
      }
      
      const { accounts, errors, total, valid, invalid } = parseResult;
      
      this.log(`‚úÖ ƒê√£ ph√¢n t√≠ch ${total} accounts: ${valid} h·ª£p l·ªá, ${invalid} kh√¥ng h·ª£p l·ªá`, 'success');
      
      if (errors.length > 0) {
        this.log('‚ö†Ô∏è C√°c account kh√¥ng h·ª£p l·ªá:', 'warning');
        errors.forEach(err => {
          this.log(`  D√≤ng ${err.line}: ${err.error}`, 'warning');
        });
      }
      
      if (accounts.length === 0) {
        throw new Error('Kh√¥ng c√≥ account h·ª£p l·ªá ƒë·ªÉ ƒëƒÉng nh·∫≠p');
      }
      
      // Reset counters
      this.results = [];
      this.successCount = 0;
      this.failedCount = 0;
      
      // Ch·∫ø ƒë·ªô SONG SONG
      if (parallelMode) {
        this.log(`\nüöÄ B·∫ÆT ƒê·∫¶U ƒêƒÇNG NH·∫¨P SONG SONG ${accounts.length} ACCOUNTS`, 'info');
        this.log(`‚ö° S·ªë browser ch·∫°y ƒë·ªìng th·ªùi: ${maxConcurrent}`, 'info');
        this.log(`‚è±Ô∏è Delay gi·ªØa m·ªói browser: ${delayBetweenAccounts[0]/1000}-${delayBetweenAccounts[1]/1000}s\n`, 'info');
        
        await this.loginBatchParallel(accounts, {
          headless,
          useProxy,
          skipIfHasSession,
          delayBetweenAccounts,
          stopOnError,
          maxConcurrent,
        });
      } 
      // Ch·∫ø ƒë·ªô TU·∫¶N T·ª∞ (c≈©)
      else {
        this.log(`\nüöÄ B·∫ÆT ƒê·∫¶U ƒêƒÇNG NH·∫¨P TU·∫¶N T·ª∞ ${accounts.length} ACCOUNTS\n`, 'info');
        
        await this.loginBatchSequential(accounts, {
          headless,
          useProxy,
          skipIfHasSession,
          delayBetweenAccounts,
          stopOnError,
        });
      }
      
      // Summary
      this.log(`\n${'='.repeat(60)}`, 'info');
      this.log(`üéâ HO√ÄN TH√ÄNH BATCH LOGIN`, 'success');
      this.log(`${'='.repeat(60)}`, 'info');
      this.log(`‚úÖ Th√†nh c√¥ng: ${this.successCount}/${accounts.length}`, 'success');
      this.log(`‚ùå Th·∫•t b·∫°i: ${this.failedCount}/${accounts.length}`, this.failedCount > 0 ? 'error' : 'info');
      
      return {
        success: true,
        total: accounts.length,
        successCount: this.successCount,
        failedCount: this.failedCount,
        results: this.results,
      };
    } catch (error) {
      this.log(`‚ùå L·ªói batch login: ${error.message}`, 'error');
      
      return {
        success: false,
        error: error.message,
        results: this.results,
      };
    }
  }

  /**
   * LOGIN BATCH PARALLEL - Ch·∫°y nhi·ªÅu browser ƒë·ªìng th·ªùi
   */
  async loginBatchParallel(accounts, options) {
    const {
      headless,
      useProxy,
      skipIfHasSession,
      delayBetweenAccounts,
      stopOnError,
      maxConcurrent,
    } = options;

    const runningTasks = new Map(); // Track c√°c task ƒëang ch·∫°y
    let currentIndex = 0;
    let completedCount = 0;

    const startNextLogin = async () => {
      if (currentIndex >= accounts.length) {
        return;
      }

      const index = currentIndex++;
      const account = accounts[index];
      
      this.log(`\n${'='.repeat(60)}`, 'info');
      this.log(`üì± [Browser ${index + 1}/${accounts.length}] ƒêang kh·ªüi ƒë·ªông...`, 'info');
      this.log(`   Email: ${account.email}`, 'info');
      this.log(`   ID: ${account.accountId}`, 'info');
      this.log(`${'='.repeat(60)}`, 'info');
      
      const taskPromise = (async () => {
        try {
          const result = await this.loginSingleAccount(account, {
            headless,
            useProxy,
            skipIfHasSession,
          });
          
          this.results.push(result);
          
          if (result.success) {
            this.successCount++;
            this.log(`\n‚úÖ [Browser ${index + 1}] TH√ÄNH C√îNG: ${result.email} ${result.skipped ? '(ƒë√£ c√≥ session)' : ''}`, 'success');
          } else {
            this.failedCount++;
            this.log(`\n‚ùå [Browser ${index + 1}] TH·∫§T B·∫†I: ${result.email} - ${result.error}`, 'error');
            
            if (stopOnError) {
              this.log('‚ö†Ô∏è D·ª´ng batch v√¨ stopOnError = true', 'warning');
              currentIndex = accounts.length; // Stop launching new tasks
            }
          }
          
          completedCount++;
          this.progress(completedCount, accounts.length, `Ho√†n th√†nh ${completedCount}/${accounts.length} accounts`);
          
        } catch (error) {
          this.failedCount++;
          this.log(`\n‚ùå [Browser ${index + 1}] L·ªñI: ${account.email} - ${error.message}`, 'error');
          
          this.results.push({
            success: false,
            accountId: account.accountId,
            email: account.email,
            error: error.message,
          });
          
          completedCount++;
          this.progress(completedCount, accounts.length, `Ho√†n th√†nh ${completedCount}/${accounts.length} accounts`);
        } finally {
          runningTasks.delete(index);
          
          // Th√¥ng b√°o s·ªë browser ƒëang ch·∫°y
          this.log(`üìä ƒêang ch·∫°y: ${runningTasks.size} browser | Ho√†n th√†nh: ${completedCount}/${accounts.length}`, 'info');
          
          // Start next task if available
          if (currentIndex < accounts.length && (!stopOnError || this.failedCount === 0)) {
            // Random delay before starting next
            const delay = delayBetweenAccounts[0] + 
                         Math.random() * (delayBetweenAccounts[1] - delayBetweenAccounts[0]);
            
            this.log(`‚è≥ Ch·ªù ${Math.round(delay / 1000)}s tr∆∞·ªõc khi kh·ªüi ƒë·ªông browser ti·∫øp theo...`, 'info');
            await this.sleep(delay);
            
            startNextLogin();
          }
        }
      })();
      
      runningTasks.set(index, taskPromise);
    };

    // Launch initial batch
    this.log(`üöÄ Kh·ªüi ƒë·ªông ${Math.min(maxConcurrent, accounts.length)} browser ƒë·∫ßu ti√™n...`, 'info');
    
    for (let i = 0; i < Math.min(maxConcurrent, accounts.length); i++) {
      await startNextLogin();
      
      // Delay between initial launches
      if (i < Math.min(maxConcurrent, accounts.length) - 1) {
        const delay = delayBetweenAccounts[0] + 
                     Math.random() * (delayBetweenAccounts[1] - delayBetweenAccounts[0]);
        await this.sleep(delay);
      }
    }

    // Wait for all tasks to complete
    this.log('\n‚è≥ ƒêang ch·ªù t·∫•t c·∫£ browser ho√†n th√†nh...', 'info');
    await Promise.all(Array.from(runningTasks.values()));
    this.log('‚úÖ T·∫•t c·∫£ browser ƒë√£ ho√†n th√†nh!', 'success');
  }

  /**
   * LOGIN BATCH SEQUENTIAL - Ch·∫°y tu·∫ßn t·ª± (c≈©)
   */
  async loginBatchSequential(accounts, options) {
    const {
      headless,
      useProxy,
      skipIfHasSession,
      delayBetweenAccounts,
      stopOnError,
    } = options;

    for (let i = 0; i < accounts.length; i++) {
      const account = accounts[i];
      
      this.progress(i + 1, accounts.length, `ƒêang x·ª≠ l√Ω account ${i + 1}/${accounts.length}`);
      
      this.log(`\n${'='.repeat(60)}`, 'info');
      this.log(`üì± ACCOUNT ${i + 1}/${accounts.length}`, 'info');
      this.log(`${'='.repeat(60)}`, 'info');
      
      const result = await this.loginSingleAccount(account, {
        headless,
        useProxy,
        skipIfHasSession,
      });
      
      this.results.push(result);
      
      if (result.success) {
        this.successCount++;
        this.log(`\n‚úÖ Th√†nh c√¥ng: ${result.email} ${result.skipped ? '(skipped - c√≥ session)' : ''}`, 'success');
      } else {
        this.failedCount++;
        this.log(`\n‚ùå Th·∫•t b·∫°i: ${result.email} - ${result.error}`, 'error');
        
        if (stopOnError) {
          this.log('‚ö†Ô∏è D·ª´ng batch v√¨ stopOnError = true', 'warning');
          break;
        }
      }
      
      // Delay between accounts (tr·ª´ account cu·ªëi)
      if (i < accounts.length - 1) {
        const delay = delayBetweenAccounts[0] + 
                     Math.random() * (delayBetweenAccounts[1] - delayBetweenAccounts[0]);
        
        this.log(`\n‚è≥ Ch·ªù ${Math.round(delay / 1000)}s tr∆∞·ªõc khi ƒëƒÉng nh·∫≠p account ti·∫øp theo...`, 'info');
        await this.sleep(delay);
      }
    }
  }

  /**
   * VERIFY ALL SESSIONS (check xem accounts n√†o c√≤n session)
   */
  async verifyAllSessions(accountIds) {
    this.log('üîç Ki·ªÉm tra sessions...', 'info');
    
    const results = [];
    
    for (const accountId of accountIds) {
      const hasSession = await this.hasExistingSession(accountId);
      const profile = this.lifecycle.getAccountProfile(accountId);
      
      results.push({
        accountId,
        hasSession,
        profile: profile ? {
          age: profile.age,
          reputation: profile.reputation,
          riskScore: profile.riskScore,
          status: profile.health.status,
        } : null,
      });
    }
    
    const withSession = results.filter(r => r.hasSession).length;
    const withoutSession = results.filter(r => !r.hasSession).length;
    
    this.log(`‚úÖ C√≥ session: ${withSession}/${accountIds.length}`, 'success');
    this.log(`‚ùå Kh√¥ng c√≥ session: ${withoutSession}/${accountIds.length}`, withoutSession > 0 ? 'warning' : 'info');
    
    return results;
  }

  /**
   * GET BATCH SUMMARY
   */
  getBatchSummary() {
    return {
      total: this.results.length,
      successCount: this.successCount,
      failedCount: this.failedCount,
      successRate: this.results.length > 0 
        ? (this.successCount / this.results.length * 100).toFixed(1) + '%'
        : '0%',
      results: this.results,
    };
  }

  /**
   * EXPORT RESULTS to file
   */
  exportResults(filePath) {
    const fs = require('fs');
    const summary = this.getBatchSummary();
    
    let output = '='.repeat(60) + '\n';
    output += 'BATCH LOGIN RESULTS\n';
    output += '='.repeat(60) + '\n\n';
    output += `Total: ${summary.total}\n`;
    output += `Success: ${summary.successCount}\n`;
    output += `Failed: ${summary.failedCount}\n`;
    output += `Success Rate: ${summary.successRate}\n\n`;
    output += '='.repeat(60) + '\n';
    output += 'DETAILS\n';
    output += '='.repeat(60) + '\n\n';
    
    this.results.forEach((result, index) => {
      output += `${index + 1}. ${result.email}\n`;
      output += `   Account ID: ${result.accountId}\n`;
      output += `   Status: ${result.success ? '‚úÖ SUCCESS' : '‚ùå FAILED'}\n`;
      
      if (result.success) {
        output += `   User Name: ${result.userName || 'N/A'}\n`;
        output += `   Has 2FA: ${result.has2FA ? 'Yes' : 'No'}\n`;
        output += `   Skipped: ${result.skipped ? 'Yes (has session)' : 'No'}\n`;
      } else {
        output += `   Error: ${result.error}\n`;
      }
      
      output += '\n';
    });
    
    fs.writeFileSync(filePath, output, 'utf8');
    this.log(`üìÑ Exported results to: ${filePath}`, 'success');
  }

  sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

module.exports = BatchLoginManager;

